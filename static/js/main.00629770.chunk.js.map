{"version":3,"sources":["App3_Child1.js","App3.js","index.js"],"names":["Movie","id","year","title","summary","medium_cover_image","genres","className","src","alt","map","result","index","key","slice","App3","state","isLoad","movies","getMovies","a","async","Axios","get","data","console","log","setState","callback","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAkCeA,MA7Bf,YAAyE,EAAxDC,GAAyD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,mBAAoBC,EAAU,EAAVA,OAC3D,OAAQ,yBAAKC,UAAU,SACf,yBAAKC,IAAKH,EAAoBI,IAAKN,IACnC,yBAAKI,UAAU,eACf,wBAAIA,UAAU,eAAeJ,GAC7B,wBAAII,UAAU,cAAcL,GAC5B,wBAAIK,UAAU,gBACTD,EAAOI,KAAK,SAACC,EAAQC,GAAT,OAAoB,wBAAIC,IAAKD,GAAQD,OAItD,uBAAGJ,UAAU,iBACRH,EAAQU,MAAM,EAAG,SCsDnBC,G,iNA/DXC,MAAQ,CACJC,QAAQ,EACRC,OAAQ,I,EAGZC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAS8BE,IAAMC,IAAI,6DATxC,gBASYL,EATZ,EASDM,KAAMA,KAAON,OACpBO,QAAQC,IAAIR,GAEZ,EAAKS,UAAS,SAAAC,GAAQ,MAAK,CAACV,SAAQD,QAAQ,MAZpC,sC,mFAmBRY,KAAKV,c,+BAIA,MAIqBU,KAAKb,MAAxBC,EAJF,EAIEA,OAAQC,EAJV,EAIUA,OACf,OAAS,6BAASX,UAAU,aACfU,EACD,yBAAKV,UAAU,WACX,0BAAMA,UAAU,gBAAhB,yCAGJ,yBAAKA,UAAU,UACVW,EAAOR,KAAI,SAAAC,GAER,OADAc,QAAQC,IAAIf,GACL,kBAAC,EAAD,CAAOE,IAAKF,EAAOV,GACtBA,GAAIU,EAAOV,GACXC,KAAMS,EAAOT,KACbC,MAAOQ,EAAOR,MACdC,QAASO,EAAOP,QAChBC,mBAAoBM,EAAON,mBAC3BC,OAAQK,EAAOL,kB,GAlD5BwB,IAAMC,YCQzBC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.00629770.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\nimport './css/App3_Child1.css';\r\n\r\n//자식Ccomponent로 사용할 js는 클래스로 사용할 필요가 없다\r\nfunction Movie( {id, year, title, summary, medium_cover_image, genres} ) { //genres추가\r\n    return (<div className=\"movie\">\r\n            <img src={medium_cover_image} alt={title}></img>\r\n            <div className=\"movie_inner\">\r\n            <h3 className=\"movie_title\">{title}</h3>\r\n            <h3 className=\"movie_year\">{year}</h3>\r\n            <ul className=\"movie_genres\">\r\n                {genres.map( (result, index) => (<li key={index}>{result}</li>) )\r\n                //props로 넘어온 genres를 회전시킴\r\n                }\r\n            </ul>\r\n            <p className=\"movie_summary\">\r\n                {summary.slice(0, 140) //문자열 자르기로 보여지는 텍스트를 줄임\r\n                }\r\n            </p>\r\n            </div>\r\n         </div>)\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropsTypes.number.isRequired,\r\n    year: PropsTypes.number.isRequired,\r\n    title: PropsTypes.string.isRequired,\r\n    summary: PropsTypes.string.isRequired,\r\n    medium_cover_image: PropsTypes.string.isRequired,\r\n    genres: PropsTypes.arrayOf(PropsTypes.string).isRequired //추가\r\n};\r\n\r\n\r\nexport default Movie;","import React from 'react';\r\nimport Axios from 'axios';\r\n//import Movie from './App2_Child1'; //자식클래스로 사용할 컴포넌트를 임포트\r\nimport Movie from './App3_Child1';\r\nimport './css/App3.css';\r\n\r\nclass App3 extends React.Component {\r\n\r\n    state = {\r\n        isLoad: true,\r\n        movies: []\r\n    }\r\n\r\n    getMovies = async () => { // async는 이 함수는 비동기야 await가 끝날떄 까지 기다려줘! 라는 것을 의미한다\r\n        //npm i axios 설치\r\n        \r\n        //script문법\r\n        //const result = await Axios.get(\"https://yts-proxy.now.sh/list_movies.json\"); //await은 Axios가 끝날떄 까지 기다려줘를 의미함\r\n        //console.log(result.data.data.movies);\r\n        \r\n        //ex6문법\r\n        //?sort_by=rating은 정렬을 의미함 api문서에서 확인\r\n        const {data:{data: {movies}}} = await Axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"); //await은 Axios가 끝날떄 까지 기다려줘를 의미함\r\n        console.log(movies);\r\n\r\n        this.setState(callback => ({movies, isLoad: false}) ); //setState를 이용해서 state의 데이터값 저장, 로딩여부를 false\r\n    }\r\n\r\n    componentDidMount() { //첫번째 랜더가 끝나고 실행되는 리엑트함수\r\n        // setTimeout(() => {\r\n        //     this.setState(callback => ({isLoad: false, test: false}) ); //test변수를 state에 마음대로 추가하더라도 괜찮다\r\n        // }, 6000);\r\n        this.getMovies();\r\n        \r\n    }\r\n\r\n    render() {\r\n        //const {isLoad} = this.state;\r\n        //return <div>{isLoad ? \"로딩중\" : \"로딩이 끝났습니다\"}</div>;\r\n        \r\n        const {isLoad, movies } = this.state;\r\n        return  (<section className=\"container\">\r\n                    {isLoad ? (\r\n                    <div className=\"loading\">\r\n                        <span className=\"loading_text\">로딩중입니다</span>\r\n                    </div>\r\n                    ) : (\r\n                    <div className=\"movies\">\r\n                        {movies.map(result => { //movies배열의 키값들을 Movie Prop으로 전달한다. \r\n                            console.log(result); //Movie에서는 타이틀을 리턴해주고 화면에 출력된다\r\n                            return <Movie key={result.id}\r\n                                id={result.id}\r\n                                year={result.year}\r\n                                title={result.title}\r\n                                summary={result.summary}\r\n                                medium_cover_image={result.medium_cover_image}\r\n                                genres={result.genres} //추가해준다\r\n                                >\r\n  \r\n                            </Movie>\r\n                        })}\r\n                    </div>\r\n                    )\r\n                    }\r\n                </section>\r\n                )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App3;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n//import App from './App';\r\n//import App1 from './App1';\r\n//import App2 from './App2';\r\nimport App3 from './App3';\r\n\r\n/*intex.html root부분의 App.js부분을 밀어넣는다*/\r\n/*render는 component HTML을 반환하는 함수이다(JSX는 자바스크립트안에 HTML을 의미한다)*/\r\n/*render는 단 한번에 하나의 component만 랜더링 할 수 있다*/\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n//ReactDOM.render(<App1 />, document.getElementById('root'));\r\n//ReactDOM.render(<App2 />, document.getElementById(\"root\"));\r\nReactDOM.render(<App3 />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}